#
# Copyright (c) 2023, 2024 by Delphix. All rights reserved.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.hyperscale.service: masking-service
  name: masking-service
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.hyperscale.service: masking-service
  strategy: {}
  template:
    metadata:
      labels:
        io.hyperscale.service: masking-service
    spec:
      {{- if .Values.masking.nodeName }}
      nodeName: {{ .Values.masking.nodeName }}
      {{- end }}
      securityContext: {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      containers:
        - env:
            {{- if .Values.masking.intelligentLoadBalance }}
            - name: INTELLIGENT_LOADBALANCE_ENABLED
              value: {{ .Values.masking.intelligentLoadBalance | quote }}
            {{- end }}
            {{- if .Values.masking.loggingLevelRoot }}
            - name: LOGGING_LEVEL_COM_DELPHIX_HYPERSCALE
              value: {{ .Values.masking.loggingLevelRoot | quote }}
            {{- end }}
            - name: MDS_NAME
              value: "masking-db"
            - name: LOAD_SERVICE_BASE_URL
              value: {{ .Values.loadServiceBaseURL }}
          image: {{ .Values.imageCredentials.registry }}:masking-service-{{ .Values.imageCredentials.tag }}
          {{- if not .Values.isDev }}
          image: {{ .Values.imageCredentials.registry }}:masking-service-{{ .Values.imageCredentials.tag }}
          {{- end }}
          {{- if .Values.isDev }}
          {{- if eq .Values.isDev true }}
          image: {{ .Values.imageCredentials.registry }}/masking-service:{{ .Values.imageCredentials.tag }}
          {{- end }}
          {{- end }}
          name: masking-service
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - containerPort: 8080
            - containerPort: 9093
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: masking-database
            - mountPath: /etc/hyperscale
              name: stage-storage
      restartPolicy: Always
      imagePullSecrets:
        - name: delphixregistrykey
      volumes:
        - name: masking-database
          persistentVolumeClaim:
            claimName: {{ .Values.masking.dbPvcName | default "masking-database-pvc" }}
        - name: stage-storage
          persistentVolumeClaim:
            claimName: {{ .Values.stagePvcName | default "stage-storage-pvc" }}
status: {}
